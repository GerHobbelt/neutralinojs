on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  linux:
    name: Upload Release Asset (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          docker build . -t neutralinojs:test-build
          mkdir build
          docker run -v `pwd`/build:/neutralinojs/build neutralinojs:test-build
          docker ps -a
          cp -r ./dist ./build/dist && pushd ./build && zip -r ../neutralino-linux.zip neutralino ./dist && popd 
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - shell: bash
        run: ${{ steps.create_release.outputs.upload_url }} > release-url.txt
      - name: Upload Release URL for Job 1
        uses: actions/upload-artifact@v1
        with:
          name: release-url
          path: release-url.txt
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./neutralino-linux.zip
          asset_name: neutralino-linux.zip
          asset_content_type: application/zip
  darwin:
    name: Upload Release Asset (Darwin)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          mkdir build
          pushd build
          cmake ..
          make
          cp -r ../dist ./dist && zip -r ../neutralino-darwin.zip neutralino ./dist && popd
      - name: Download Release URL for Job 2
        uses: actions/download-artifact@v1
        with:
          name: release-url
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: {{ cat release-url.txt }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./neutralino-darwin.zip
          asset_name: neutralino-darwin.zip
          asset_content_type: application/zip
